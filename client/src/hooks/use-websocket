import { useEffect, useRef, useCallback } from 'react';
import { useToast } from '@/hooks/use-toast';

type WebSocketMessage = {
  type: string;
  data: {
    userId?: number;
    isOnline?: boolean;
    content?: string;
    channelId?: string;
    fileUrl?: string;
  };
};

export function useWebSocket() {
  const wsRef = useRef<WebSocket | null>(null);
  const { toast } = useToast();

  const connect = useCallback(() => {
    const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
    const wsUrl = `${protocol}//${window.location.host}/ws`;

    wsRef.current = new WebSocket(wsUrl);

    wsRef.current.onopen = () => {
      toast({
        title: "Terhubung",
        description: "Berhasil terhubung ke server chat",
      });
    };

    wsRef.current.onclose = () => {
      toast({
        title: "Terputus",
        description: "Koneksi ke server chat terputus",
        variant: "destructive",
      });
    };

    return () => {
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, [toast]);

  const sendMessage = useCallback((message: WebSocketMessage) => {
    if (wsRef.current?.readyState === WebSocket.OPEN) {
      wsRef.current.send(JSON.stringify(message));
    }
  }, []);

  const subscribe = useCallback((callback: (message: WebSocketMessage) => void) => {
    if (wsRef.current) {
      wsRef.current.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          callback(message);
        } catch (error) {
          console.error('Gagal mengurai pesan WebSocket:', error);
        }
      };
    }
  }, []);

  useEffect(() => {
    return connect();
  }, [connect]);

  return { sendMessage, subscribe };
}
